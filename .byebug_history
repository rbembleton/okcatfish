c
exit
pr_arr
pr_arr.sample.pics
pr_arr.sample.pics[0]
pr_arr.sample.pics.first
pr_arr.sample.pics
pr_arr.sample
pr_arr
c
exit
user.prof_pic.class == PhotoRepoPic
user.prof_pic.class
user.prof_pic
exit
c
exit
cached_common_questions
c
exit
c
exit
reload!
cache[1][0].user_responses
cache[1][0]
cache[1]
exit
cached_questions
c
exit
c
exit
c
exit
cache
cache.first
cache[0]
cache
cached_user
match
self
match
cached_match
c
exit
reload!
c
exit
cexit
c
cc
c
exit
c
exit
reload!
c
exit
reload!
answer_ids
response
c
exit
c
exit
c
exit
c
exit
cached_match.first.user_responses
cached_match
c
exit
c
exit
c
exit
c
exit
c
exit
reload!
c
exit
cached_common_questions
c
exit
c
exit
c
exit
reload
cached_match_questions_answered.find(user_response.question.id).user_responses.find_by(user_id: match.id)
exit
!!user_response.user_match_responses.find { |r| r.answer_id = temp_match_response.answer_id }
!!temp_match_response.user_match_responses.find { |r| r.answer_id =  user_response.answer_id }
c
exit
!!cached_match_questions_answered.find { |q| q.id = user_response.question.id }
cached_match_questions_answered.exists?(user_response.question.id)
c
exit
!!cached_match_questions_answered.find(user_response.question.id)
c
exit
reload!
c
exit
c
exit
reload!
c
exit
reload!
c
exit
c
exit
c
reload!
exit
c
exit
reload!
user_response.answer
c
exit
cached_user_responses[0]
exit
c
exit
c
cached_user_responses.first.answer.id
cached_user_responses.first.answer
cached_user_responses.first
cached_user_responses
cache
c
exit
c
exit
@ordered_keys.reverse.to_h
@ordered_keys.reverse
@ordered_keys 
c
s
search_params
exit
search_params
exit
@questions
exit
      Question.joins('JOIN answers ON answers.question_id = questions.id LEFT OUTER JOIN user_responses ON user_responses.answer_id = answers.id').where('user_responses.user_id = ? OR user_responses.user_id IS NULL', user_id).group(:id).having('COUNT(user_responses.user_id) = 0').order(order: :asc).limit(20)
        .limit(20)
        .order(order: :asc)
        .having('COUNT(user_responses.user_id) = 0')
        .group(:id)
        .where('user_responses.user_id = ? OR user_responses.user_id IS NULL', user_id)
        .joins('JOIN answers ON answers.question_id = questions.id LEFT OUTER JOIN user_responses ON user_responses.answer_id = answers.id')
Question
user_id = u1.id
u1.user_responses
u1 = User.find(130)
Question.all
Question.next_twenty(130)
question_params[:user_id]
@questions
exit
c
exit
cache.length == 2
cache
exit
c
exit
c
exit
c
match_total_weight
c
match_obj
c
user_weighted_sum
match_weighted_sum
(match_obj[:match][:weight] * match_obj[:match][:presence_mod])
(match_obj[:user][:weight] * match_obj[:user][:presence_mod])
match_obj
c
match_weight_arr
c
match_weight_arr
c
exit
match_obj
c
exit
c
temp_match_response.user_match_responses.exists?(answer_id: user_response.answer_id)
temp_match_response.user_match_responses
temp_match_response
c
exit
match.questions_answered.find(user_response.question.id).user_responses.find_by(user_id: match.id)
match.questions_answered.find(user_response.question.id).user_responses.find_by(user_id: match_id)
match.questions_answered.find(user_response.question.id).user_responses
match.questions_answered.find(user_response.question.id)
match.answered_questions.find(user_response.question.id)
c
match.questions_answered.exists?(user_response.question.id)
match.questions_answered
match.answered_questions
match
user_response.question.id
user_response.question
match.answered_questions.exists?(user_response.question.id)
user_response
c
match
c
match 
c
match
exit
cached_user_questions.find(id: match_response.question.id)
cached_user_questions
c
match_response
c
match
exit
self.questions_answered
self
self.questions
cached_user_responses
cached_user_response
_.to_a
cached_user_responses.where('questions.id = ?',  match_response.question.id)
cached_user_responses.find('questions.id = ?',  match_response.question.id)
match_response.question.id
cached_user_responses.exists?('questions.id = ?',  match_response.question.id)
cached_user_responses.question
cached_user_responses.questions
cached_user_responses
match_response
c
match.user_responses
match
c
exit
c
exit
cached_user.user_responses
cached_user
c
match_response
c
