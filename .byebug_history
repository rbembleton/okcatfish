c
exit
@ordered_keys.reverse.to_h
@ordered_keys.reverse
@ordered_keys 
c
s
search_params
exit
search_params
exit
@questions
exit
      Question.joins('JOIN answers ON answers.question_id = questions.id LEFT OUTER JOIN user_responses ON user_responses.answer_id = answers.id').where('user_responses.user_id = ? OR user_responses.user_id IS NULL', user_id).group(:id).having('COUNT(user_responses.user_id) = 0').order(order: :asc).limit(20)
        .limit(20)
        .order(order: :asc)
        .having('COUNT(user_responses.user_id) = 0')
        .group(:id)
        .where('user_responses.user_id = ? OR user_responses.user_id IS NULL', user_id)
        .joins('JOIN answers ON answers.question_id = questions.id LEFT OUTER JOIN user_responses ON user_responses.answer_id = answers.id')
Question
user_id = u1.id
u1.user_responses
u1 = User.find(130)
Question.all
Question.next_twenty(130)
question_params[:user_id]
@questions
exit
c
exit
cache.length == 2
cache
exit
c
exit
c
exit
c
match_total_weight
c
match_obj
c
user_weighted_sum
match_weighted_sum
(match_obj[:match][:weight] * match_obj[:match][:presence_mod])
(match_obj[:user][:weight] * match_obj[:user][:presence_mod])
match_obj
c
match_weight_arr
c
match_weight_arr
c
exit
match_obj
c
exit
c
temp_match_response.user_match_responses.exists?(answer_id: user_response.answer_id)
temp_match_response.user_match_responses
temp_match_response
c
exit
match.questions_answered.find(user_response.question.id).user_responses.find_by(user_id: match.id)
match.questions_answered.find(user_response.question.id).user_responses.find_by(user_id: match_id)
match.questions_answered.find(user_response.question.id).user_responses
match.questions_answered.find(user_response.question.id)
match.answered_questions.find(user_response.question.id)
c
match.questions_answered.exists?(user_response.question.id)
match.questions_answered
match.answered_questions
match
user_response.question.id
user_response.question
match.answered_questions.exists?(user_response.question.id)
user_response
c
match
c
match 
c
match
exit
cached_user_questions.find(id: match_response.question.id)
cached_user_questions
c
match_response
c
match
exit
self.questions_answered
self
self.questions
cached_user_responses
cached_user_response
_.to_a
cached_user_responses.where('questions.id = ?',  match_response.question.id)
cached_user_responses.find('questions.id = ?',  match_response.question.id)
match_response.question.id
cached_user_responses.exists?('questions.id = ?',  match_response.question.id)
cached_user_responses.question
cached_user_responses.questions
cached_user_responses
match_response
c
match.user_responses
match
c
exit
c
exit
cached_user.user_responses
cached_user
c
match_response
c
match.id
match
exit
question 
exit
question 
exit
q_obj
exit
q_obj[:answers].sample.id
q_obj[:answers].sample
q_obj[:answers].select
q_obj[:answers]
q_obj
exit
answers
c
answers
exit
UserResponse.all
@user_responses
c
s
self.user_id
s
self
s
self
exit
n
c
s
exit
n
c
exit
c
user2
user1
exit
most_recent
this_time
c
this_time > most_recent
most_recent
this_time
c
@threads
c
@threads
exit
c
message_thread.most_recent_message.body
message_thread.most_recent_message
message_thread
exit
thread
c
q
quite
exit
step
@threads
c
MessageThread.find(13)
MessageThread.all
self
c
self
c
self.updated_at
c
self.updated_at
exit
@threads
exit
c
self.updated_at
c
self.updated_at
exit
message_params[:thread_id]
message_params[:thread_id
q
c
exit
(JSON.parse response.body)
(JSON.parse response.body)["results"]
response["results"]
response
exit
body_json
c
zip
q
@user.errors.full_messages
@user.errors
c
@user.errors
exit
@user.errors
@user.errors.delete([:lat,:lng,:loc_desc])
@user
exit
@user.errors.full_messages
@user.errors.
@user.errors.delete(:loc_desc)
@user.errors.delete(:lng)
@user.errors.delete(:lat)
@user.errors.allow(:birthdate)
@user.errors.remove(:lng)
@user.errors
c
@user
c
q
exit
search_params
exit
search_params
exit
    params.require(:search).permit(:distance) + params.require(:search).require(:location).permit(:lat, :lng)
    params.require(:search).require(:location).permit(:lat, :lng)
params.require(:search).permit(:distance) +
params.require(:search).require(:location).permit(:lat, :lng)
params.require(:search).permit(:distance)
exit
search_params
exit
search_params
exit
search_params
exit
params
search_params
exit
content
contents
exit
